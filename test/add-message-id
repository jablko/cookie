#!/usr/bin/env python

from mail.test import equal, expect, ok
from StringIO import StringIO
from twisted.enterprise import adbapi
from twisted.internet import defer, protocol, reactor, threads
from twisted.mail import smtp

expect(4)

def insert():
  conn = adbapi.Connection(pool)
  trans = adbapi.Transaction(pool, conn)

  trans.execute('INSERT INTO address (address, sender) VALUES (%s, %s)', ('bob@example.com', 'abc123'))
  trans.close()

def callback(result):
  class Message:
    def __init__(self):
      self.data = []

    def eomReceived(self):
      equal("\n".join(self.data) + "\n", self.expect['data'])

      return defer.succeed(None)

    def lineReceived(self, line):
      self.data.append(line)

  class Server(smtp.ESMTP):
    def do_UNKNOWN(self, rest):
      raise

    def receivedHeader(self, helo, origin, recipients):
      pass

    def validateFrom(self, helo, origin):
      self.expect = self.expect.pop(0)

      equal(str(origin), self.expect['from'])

      return origin

    def validateTo(self, user):
      equal(str(user), self.expect['to'].pop(0))

      message = Message()
      message.expect = self.expect

      return lambda: message

  # ESMTPFactory doesn't exist
  class ServerFactory(smtp.SMTPFactory):
    protocol = Server

    def buildProtocol(self, addr):
      protocol = smtp.SMTPFactory.buildProtocol(self, addr)
      protocol.expect = self.expect.pop(0)

      return protocol

  factory = ServerFactory()
  factory.expect = [[{
    'data': '''Received: from example.com (localhost [127.0.0.1])
  by example.com (Postfix) with ESMTP
  for <abc123@example.com>; Fri, 13 Feb 2009 15:31:30 -0800 (PST)
From: notalice@example.com
Message-ID: <1234567890@example.com>

la di da
''',
    'from': 'alice@example.com',
    'to': ['abc123@example.com'] }]]

  reactor.listenTCP(1894, factory)

  class Client(smtp.ESMTPClient):

    # Shortcut ESMTPClient.__init__(), no authentication or TLS
    def __init__(self, *args, **kw):
      self.secret = None

      return smtp.SMTPClient.__init__(self, 'example.com', *args, **kw)

    def getMailData(self):
      return self.message['data']

    def getMailFrom(self):
      return self.message['from']

    def getMailTo(self):
      return self.message['to']

    def smtpState_from(self, code, resp):
      self.message = self.factory.message.pop(0)

      return smtp.ESMTPClient.smtpState_from(self, code, resp)

    def smtpState_msgSent(self, code, resp):
      if self.factory.message:
        self._from = None
        self.toAddressesResult = []

        return self.smtpState_from(code, resp)

      # No more messages to send
      self._disconnectFromServer()

  class ClientFactory(protocol.ClientFactory):
    protocol = Client

  factory = ClientFactory()
  factory.message = [{
    'data': StringIO('''Received: from example.com (localhost [127.0.0.1])
  by example.com (Postfix) with ESMTP
  for <abc123@example.com>; Fri, 13 Feb 2009 15:31:30 -0800 (PST)
From: notalice@example.com
Message-ID: <1234567890@example.com>

la di da
'''),
    'from': 'alice@example.com',
    'to': ['abc123@example.com'] }]

  reactor.connectTCP('localhost', 1438, factory)

  def timeout():
    def select():
      conn = adbapi.Connection(pool)
      trans = adbapi.Transaction(pool, conn)

      trans.execute('SELECT sender FROM message_id WHERE message_id = %s', '1234567890@example.com')
      result = trans.fetchall()
      trans.close()

      return result

    def callback(result):
      equal(result, (('abc123',),))

    threads.deferToThreadPool(reactor, pool.threadpool, select).addCallback(callback)

  reactor.callLater(1, timeout)

threads.deferToThreadPool(reactor, pool.threadpool, insert).addCallback(callback)
