#!/usr/bin/env python

from cookie.test import *
from untwisted import smtp

expect(6)

@sdfg
def _():
  class sample(smtp.server):

    @untwisted.each
    def mail():
      ctx = yield

      class sample(smtp.server.mail):
        sender = staticmethod(untwisted.each(lambda: equal('carol@example.com', str((yield)))))
        recipient = staticmethod(untwisted.each(lambda: equal('dave@example.com', str((yield)))))
        content = staticmethod(untwisted.each(lambda: equal('\r\n'.join(('',
          'da di la')), (yield))))

      ctx = yield sample.__get__(ctx)()

      # QUIT
      ctx = yield smtp.server.mail.__get__(ctx)()

      class sample(smtp.server.mail):
        sender = staticmethod(untwisted.each(lambda: equal('alice@example.com', str((yield)))))
        recipient = staticmethod(untwisted.each(lambda: equal('bob@example.com', str((yield)))))
        content = staticmethod(untwisted.each(lambda: equal('\r\n'.join(('',
          'la di da')), (yield))))

      ctx = yield sample.__get__(ctx)()

      # QUIT
      yield smtp.server.mail.__get__(ctx)()

  listen().then(sample)
  listen().then(sample)

  def timeout(secs, *args, **kwds):
    ctx = promise.promise()

    reactor.callLater(secs, untwisted.partial(ctx, *args or (None,), **kwds))

    return ctx

  #@connect().then(untwisted.partial(timeout, 1)).then
  @untwisted.identity(connect().then(untwisted.partial(timeout, 1)).then)
  class _(smtp.client):

    @untwisted.each
    def mail():
      ctx = yield

      class sample(smtp.client.mail):
        sender = iter(('alice@example.com',)).next
        recipient = iter(('bob@example.com',)).next
        content = iter(('\r\n'.join(('',
          'la di da')),)).next

      yield sample.__get__(ctx)()

  yield _

  #@connect().then
  @untwisted.identity(connect().then)
  class _(smtp.client):

    @untwisted.each
    def mail():
      ctx = yield

      class sample(smtp.client.mail):
        sender = iter(('carol@example.com',)).next
        recipient = iter(('dave@example.com',)).next
        content = iter(('\r\n'.join(('',
          'da di la')),)).next

      yield sample.__get__(ctx)()

  yield _
