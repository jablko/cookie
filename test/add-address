#!/usr/bin/env python

from mail import test
from mail.test import equal, expect, ok
from StringIO import StringIO
from twisted.enterprise import adbapi
from twisted.internet import reactor, threads

expect(3)

class Message(test.Message):
  def eomReceived(self):
    equal("\n".join(self.data) + "\n", '''Received: from example.com (localhost [127.0.0.1])
  by example.com (Postfix) with ESMTPA
  for <notbob@example.com>; Fri, 13 Feb 2009 15:31:30 -0800 (PST)
From: ''' + str(sender) + '''

la di da
''')

    return test.Message.eomReceived(self)

class Server(test.Server):
  def validateFrom(self, helo, origin):
    global sender

    sender = origin

    return test.Server.validateFrom(self, helo, origin)

  def validateTo(self, user):
    test.Server.validateTo(self, user)

    message = Message()
    message.expect = self.expect

    return lambda: message

class ServerFactory(test.ServerFactory):
  protocol = Server

factory = ServerFactory()
factory.expect = [[{ 'to': ['bob@example.com'] }]]

reactor.listenTCP(1894, factory)

factory = test.ClientFactory()
factory.message = [{
  'data': StringIO('''Received: from example.com (localhost [127.0.0.1])
  by example.com (Postfix) with ESMTPA
  for <notbob@example.com>; Fri, 13 Feb 2009 15:31:30 -0800 (PST)
From: notalice@example.com

la di da
'''),
  'from': 'alice@example.com',
  'to': ['bob@example.com'] }]

reactor.connectTCP('localhost', 1438, factory)

def timeout():
  def select():
    conn = adbapi.Connection(pool)
    trans = adbapi.Transaction(pool, conn)

    trans.execute('SELECT sender FROM address WHERE address = %s', 'bob@example.com')
    result = trans.fetchall()
    trans.close()

    return result

  def callback(result):
    equal(result, ((str(sender.local),),))

  threads.deferToThreadPool(reactor, pool.threadpool, select).addCallback(callback)

reactor.callLater(1, timeout)
