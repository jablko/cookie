#!/usr/bin/env python

import re
from mail.test import equal, ok
from StringIO import StringIO
from twisted.application import internet, service
from twisted.enterprise import adbapi
from twisted.internet import defer, protocol, reactor, threads
from twisted.mail import smtp

application = service.Application('test')

pool = adbapi.ConnectionPool('MySQLdb', db='cookie', user='root')

def delete():
  conn = adbapi.Connection(pool)
  trans = adbapi.Transaction(pool, conn)

  trans.execute('DELETE FROM address')
  trans.close()

message = [{
  'data': StringIO('''Received: from example.com (localhost [127.0.0.1])
  by example.com (Postfix) with ESMTPA
  for <bob@example.com>; Fri, 13 Feb 2009 15:31:30 -0800 (PST)
From: notalice@example.com

la di da
'''),
  'from': 'alice@example.com',
  'to': ['bob@example.com'] }]

def callback(result):
  class Message:
    def __init__(self):
      self.data = []

    def eomReceived(self):
      global sender

      pattern = re.escape('''Received: from example.com (localhost [127.0.0.1])
  by example.com (Postfix) with ESMTPA
  for <bob@example.com>; Fri, 13 Feb 2009 15:31:30 -0800 (PST)
From: ''') + '([0123456789abcdefghijklmnopqrstuvwxyz]{6})' + re.escape('''@nottheoilrig.com

la di da
''')

      actual = "\n".join(self.data) + "\n"
      match = re.match(pattern, actual)

      ok(match, actual)

      sender = match.group(1)

      return defer.succeed(None)

    def lineReceived(self, line):
      self.data.append(line)

  class Server(smtp.ESMTP):
    def do_UNKNOWN(self, rest):
      raise Exception

    def receivedHeader(self, helo, origin, recipients):
      pass

    def validateFrom(self, helo, origin):
      equal(str(origin), 'alice@example.com')

      return origin

    def validateTo(self, user):
      equal(str(user), 'bob@example.com')

      return Message

  # ESMTPFactory doesn't exist
  class ServerFactory(smtp.SMTPFactory):
    protocol = Server

  factory = ServerFactory()

  service = internet.TCPServer(1894, factory)
  service.setServiceParent(application)

  class Client(smtp.ESMTPClient):

    # Shortcut ESMTPClient.__init__(), no authentication or TLS
    def __init__(self, *args, **kw):
      self.secret = None

      return smtp.SMTPClient.__init__(self, *args, **kw)

    def getMailData(self):
      return message[0]['data']

    def getMailFrom(self):
      return message[0]['from']

    def getMailTo(self):
      return message[0]['to']

    def smtpState_msgSent(self, code, resp):
      global message

      message = message[1:]
      if message:
        self._from = None
        self.toAddressesResult = []

        return smtp.ESMTPClient.smtpState_msgSent(self, code, resp)

      # No more messages to send
      self._disconnectFromServer()

  class ClientFactory(protocol.ClientFactory):
    protocol = Client

    def buildProtocol(self, addr):
      return self.protocol('example.com')

  factory = ClientFactory()

  service = internet.TCPClient('localhost', 1438, factory)
  service.setServiceParent(application)

  def timeout():
    def select():
      conn = adbapi.Connection(pool)
      trans = adbapi.Transaction(pool, conn)

      trans.execute('SELECT sender FROM address WHERE address = %s', 'bob@example.com')
      result = trans.fetchall()
      trans.close()

      return result

    def callback(result):
      equal(result, ((sender,),))

      reactor.stop()

    threads.deferToThreadPool(reactor, pool.threadpool, select).addCallback(callback)

  reactor.callLater(2, timeout)

threads.deferToThreadPool(reactor, pool.threadpool, delete).addCallback(callback)
