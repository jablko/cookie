#!/usr/bin/env python

from mail.test import equal, expect, ok
from StringIO import StringIO
from twisted.enterprise import adbapi
from twisted.internet import defer, protocol, reactor, threads
from twisted.mail import smtp

expect(3)

def insert():
  conn = adbapi.Connection(pool)
  trans = adbapi.Transaction(pool, conn)

  trans.execute('INSERT INTO message_id (message_id, sender) VALUES (%s, %s)', ('1234567890@example.com', 'abc123'))
  trans.close()

message = [{
  'data': StringIO('''Received: from example.com (localhost [127.0.0.1])
  by example.com (Postfix) with ESMTPA
  for <notbob@example.com>; Fri, 13 Feb 2009 15:31:30 -0800 (PST)
From: notalice@example.com
In-Reply-To: <1234567890@example.com>

la di da
'''),
  'from': 'alice@example.com',
  'to': ['bob@example.com'] }]

def callback(result):
  class Message:
    def __init__(self):
      self.data = []

    def eomReceived(self):
      equal("\n".join(self.data) + "\n", '''Received: from example.com (localhost [127.0.0.1])
  by example.com (Postfix) with ESMTPA
  for <notbob@example.com>; Fri, 13 Feb 2009 15:31:30 -0800 (PST)
From: abc123@nottheoilrig.com
In-Reply-To: <1234567890@example.com>

la di da
''')

      return defer.succeed(None)

    def lineReceived(self, line):
      self.data.append(line)

  class Server(smtp.ESMTP):
    def do_UNKNOWN(self, rest):
      raise

    def receivedHeader(self, helo, origin, recipients):
      pass

    def validateFrom(self, helo, origin):
      equal(str(origin), 'abc123@nottheoilrig.com')

      return origin

    def validateTo(self, user):
      equal(str(user), 'bob@example.com')

      return Message

  # ESMTPFactory doesn't exist
  class ServerFactory(smtp.SMTPFactory):
    protocol = Server

  factory = ServerFactory()
  reactor.listenTCP(1894, factory)

  class Client(smtp.ESMTPClient):

    # Shortcut ESMTPClient.__init__(), no authentication or TLS
    def __init__(self, *args, **kw):
      self.secret = None

      return smtp.SMTPClient.__init__(self, *args, **kw)

    def getMailData(self):
      return message[0]['data']

    def getMailFrom(self):
      return message[0]['from']

    def getMailTo(self):
      return message[0]['to']

    def smtpState_msgSent(self, code, resp):
      global message

      message = message[1:]
      if message:
        self._from = None
        self.toAddressesResult = []

        return smtp.ESMTPClient.smtpState_msgSent(self, code, resp)

      # No more messages to send
      self._disconnectFromServer()

  class ClientFactory(protocol.ClientFactory):
    protocol = Client

    def buildProtocol(self, addr):
      return self.protocol('example.com')

  factory = ClientFactory()
  reactor.connectTCP('localhost', 1438, factory)

threads.deferToThreadPool(reactor, pool.threadpool, insert).addCallback(callback)
