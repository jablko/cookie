#!/usr/bin/env python

from mail.test import equal, expect, ok
from StringIO import StringIO
from twisted.enterprise import adbapi
from twisted.internet import defer, protocol, reactor, threads
from twisted.mail import smtp

expect(2)

message = [{
  'data': StringIO('''Received: from example.com (localhost [127.0.0.1])
  by example.com (Postfix) with ESMTPA
  for <notbob@example.com>; Fri, 13 Feb 2009 15:31:30 -0800 (PST)
From: notalice@example.com

la di da
'''),
  'from': 'alice@example.com',
  'to': ['bob@example.com'] }]

class Message:
  def __init__(self):
    self.data = []

  def eomReceived(self):
    return defer.succeed(None)

  def lineReceived(self, line):
    self.data.append(line)

class Server(smtp.ESMTP):
  def do_UNKNOWN(self, rest):
    raise

  def do_XFORWARD(self, rest):
    global xforward

    xforward = rest

    self.sendCode(250, 'Ok')

  def extensions(self):
    return { 'XFORWARD': ['NAME', 'ADDR', 'PORT', 'HELO', 'PROTO', 'SOURCE'] }

  def receivedHeader(self, helo, origin, recipients):
    pass

  def validateFrom(self, helo, origin):
    equal(xforward, 'NAME=localhost ADDR=127.0.0.1 PORT=47831 HELO=example.com PROTO=ESMTP SOURCE=LOCAL')

    return origin

  def validateTo(self, user):
    return Message

# ESMTPFactory doesn't exist
class ServerFactory(smtp.SMTPFactory):
  protocol = Server

factory = ServerFactory()
reactor.listenTCP(1894, factory)

class Client(smtp.ESMTPClient):

  # Shortcut ESMTPClient.__init__(), no authentication or TLS
  def __init__(self, *args, **kw):
    self.secret = None

    return smtp.SMTPClient.__init__(self, *args, **kw)

  def esmtpState_serverConfig(self, code, resp):
    equal(resp, '''selene Hello 127.0.0.1, nice to meet you
XFORWARD NAME ADDR PORT HELO PROTO SOURCE''')

    return smtp.ESMTPClient.esmtpState_serverConfig(self, code, resp)

  def getMailData(self):
    return message[0]['data']

  def getMailFrom(self):
    return message[0]['from']

  def getMailTo(self):
    return message[0]['to']

  def smtpState_from(self, code, resp):
    self.sendLine('XFORWARD NAME=localhost ADDR=127.0.0.1 PORT=47831 HELO=example.com PROTO=ESMTP SOURCE=LOCAL')
    self._expected = xrange(0, 1000)
    self._okresponse = lambda code, resp: smtp.ESMTPClient.smtpState_from(self, code, resp)

  def smtpState_msgSent(self, code, resp):
    global message

    message = message[1:]
    if message:
      self._from = None
      self.toAddressesResult = []

      return smtp.ESMTPClient.smtpState_msgSent(self, code, resp)

    # No more messages to send
    self._disconnectFromServer()

class ClientFactory(protocol.ClientFactory):
  protocol = Client

  def buildProtocol(self, addr):
    return self.protocol('example.com')

factory = ClientFactory()
reactor.connectTCP('localhost', 1438, factory)
