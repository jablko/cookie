#!/usr/bin/env python

from cookie.test import *
from untwisted import smtp

expect(6)

@sdfg
def _():

  #@listen().then
  @untwisted.identity(listen().then)
  class _(smtp.server):

    @untwisted.each
    def mail():
      ctx = yield

      class sample(smtp.server.mail):
        mail = staticmethod(untwisted.each(lambda: equal('alice@example.com', str((yield)))))

        @promise.continuate
        def recipient(ctx, mailbox):
          ctx.ctx.transport.write(str(smtp.reply(456, 'Expect')))

          command = yield ctx.ctx.command()

          equal('RSET\r\n', str(command))

          #return ...
          raise StopIteration(ctx.afterMail(command, ctx.afterMail))

      ctx = yield sample.__get__(ctx)()

      class sample(smtp.server.mail):
        mail = staticmethod(untwisted.each(lambda: equal('alice@example.com', str((yield)))))
        recipient = staticmethod(untwisted.each(lambda: equal('bob@example.com', str((yield)))))
        data = staticmethod(untwisted.each(lambda: equal('la di da', str((yield)))))

      ctx = yield sample.__get__(ctx)()

      # QUIT
      yield smtp.server.mail.__get__(ctx)()

  #@connect().then
  @untwisted.identity(connect().then)
  class _(smtp.client):

    @untwisted.each
    def mail():
      ctx = yield

      class sample(smtp.client.mail):
        mail = iter(('alice@example.com',)).next
        recipient = iter(('bob@example.com',)).next
        data = iter(('la di da',)).next

        @promise.continuate
        def dataCmd(ctx, data):
          try:
            ok(False, (yield smtp.client.mail.dataCmd(ctx, data)))

          except smtp.reply as e:
            equal('456 Expect\r\n', str(e))

          #return ...
          raise StopIteration(smtp.client.mail.dataCmd(ctx, data))

      yield sample.__get__(ctx)()

  return _
